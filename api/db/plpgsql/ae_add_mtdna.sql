DROP FUNCTION IF EXISTS ae_add_mtdna (
  id_mtdna numeric,
  fk_sample_id numeric,
  successful text,
  haplo_vs_rcrs text,
  seq_range text,
  class_method text,
  haplogroup text,
  overall_rank numeric,
  superhaplo text,
  haplo_ancest_origin text,
  expect_not_fd_polys text,
  private_polys text,
  heteroplasmies text,
  alter_haplo text,
  fastA text,
  bam_file text,
  vcf_file text,
  possible_mat_relat text,
  seq_strategy text,
  libraries_seq numeric,
  raw_reads numeric,
  mapped_reads numeric,
  whole_coverage numeric,
  mean_read_depth numeric,
  fraction numeric,
  average_length numeric,
  contamination numeric,
  updated_on date,
  comments text,
  interpretation text
);

CREATE OR REPLACE FUNCTION ae_add_mtdna (
  id_mtdna numeric,
  fk_sample_id numeric,
  successful text,
  haplo_vs_rcrs text,
  seq_range text,
  class_method text,
  haplogroup text,
  overall_rank numeric,
  superhaplo text,
  haplo_ancest_origin text,
  expect_not_fd_polys text,
  private_polys text,
  heteroplasmies text,
  alter_haplo text,
  fastA text,
  bam_file text,
  vcf_file text,
  possible_mat_relat text,
  seq_strategy text,
  libraries_seq numeric,
  raw_reads numeric,
  mapped_reads numeric,
  whole_coverage numeric,
  mean_read_depth numeric,
  fraction numeric,
  average_length numeric,
  contamination numeric,
  updated_on date,
  comments text,
  interpretation text
)
RETURNS numeric as
$$
DECLARE
  _r record;
  _q text;
BEGIN

  IF id_mtdna IS NULL
  THEN
    _q := format('INSERT INTO mtdna (
      fk_sample_id,
      successful,
      haplo_vs_rcrs,
      seq_range,
      class_method,
      haplogroup,
      overall_rank,
      superhaplo,
      haplo_ancest_origin,
      expect_not_fd_polys,
      private_polys,
      heteroplasmies,
      alter_haplo,
      fastA,
      bam_file,
      vcf_file,
      possible_mat_relat,
      seq_strategy,
      libraries_seq,
      raw_reads,
      mapped_reads,
      whole_coverage,
      mean_read_depth,
      fraction,
      average_length,
      contamination,
      updated_on,
      comments,
      interpretation
      ) VALUES (
        %s, %L, %L, %L, %L, %L, %L, %L, %L, %L, %L, %L, %L, %L, %L, %L, %L, %L, %L, %L,
        %L, %L, %L, %L, %L, %L, %L::date, %L, %L
      ) RETURNING id_mtdna',
      fk_sample_id,
      successful,
      haplo_vs_rcrs,
      seq_range,
      class_method,
      haplogroup,
      overall_rank,
      superhaplo,
      haplo_ancest_origin,
      expect_not_fd_polys,
      private_polys,
      heteroplasmies,
      alter_haplo,
      fastA,
      bam_file,
      vcf_file,
      possible_mat_relat,
      seq_strategy,
      libraries_seq,
      raw_reads,
      mapped_reads,
      whole_coverage,
      mean_read_depth,
      fraction,
      average_length,
      contamination,
      updated_on,
      comments,
      interpretation
    );
  ELSE
    _q := format('UPDATE mtdna SET
      fk_sample_id = %s,
      successful = %L,
      haplo_vs_rcrs = %L,
      seq_range = %L,
      class_method = %L,
      haplogroup = %L,
      overall_rank = %L,
      superhaplo = %L,
      haplo_ancest_origin = %L,
      expect_not_fd_polys = %L,
      private_polys = %L,
      heteroplasmies = %L,
      alter_haplo = %L,
      fastA = %L,
      bam_file = %L,
      vcf_file = %L,
      possible_mat_relat = %L,
      seq_strategy = %L,
      libraries_seq = %L,
      raw_reads = %L,
      mapped_reads = %L,
      whole_coverage = %L,
      mean_read_depth = %L,
      fraction = %L,
      average_length = %L,
      contamination = %L,
      updated_on = %L::date,
      comments = %L,
      interpretation = %L
      WHERE id_mtdna = %s
      RETURNING *',
      fk_sample_id,
      successful,
      haplo_vs_rcrs,
      seq_range,
      class_method,
      haplogroup,
      overall_rank,
      superhaplo,
      haplo_ancest_origin,
      expect_not_fd_polys,
      private_polys,
      heteroplasmies,
      alter_haplo,
      fastA,
      bam_file,
      vcf_file,
      possible_mat_relat,
      seq_strategy,
      libraries_seq,
      raw_reads,
      mapped_reads,
      whole_coverage,
      mean_read_depth,
      fraction,
      average_length,
      contamination,
      updated_on,
      comments,
      interpretation,
      id_mtdna
    );
  END IF;
  EXECUTE _q INTO _r;

  RETURN _r.id_mtdna;

END;
$$ LANGUAGE plpgsql;
